{"version":3,"sources":["img/rmm.png","img/be-fe-schema.png","img/logo.png","App.js","index.js"],"names":["theme","colors","primary","secondary","darkBg","yellow","fontSizes","header","paragraph","App","backgroundColor","style","height","margin","src","rmmImg","alt","width","material","fontSize","language","showLineNumbers","indentNormalizer","padding","graphqllogoImg","autoFillHeight","priority","beFeSchemaImg","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4423642.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rmm.26c72859.png\";","export default __webpack_public_path__ + \"static/media/be-fe-schema.a3224c93.png\";","export default __webpack_public_path__ + \"static/media/logo.1fa2504a.png\";","import React from 'react';\nimport { Deck, Slide, Heading, Image, Text, ListItem,\n  UnorderedList, Link, CodePane, indentNormalizer, Appear,\n} from 'spectacle';\nimport material from 'react-syntax-highlighter/dist/esm/styles/prism/material-dark';\n\nimport rmmImg from './img/rmm.png';\nimport beFeSchemaImg from './img/be-fe-schema.png';\nimport graphqllogoImg from './img/logo.png';\n\nconst theme = {\n  colors: {\n    primary: '#ECECED',\n    secondary: '#ffdc4e',\n    darkBg: \"#3E4047\",\n    yellow: \"#ffdc4e\",\n  },\n  fontSizes: {\n    header: '64px',\n    paragraph: '28px'\n  },\n}\n\nfunction App() {\n  return (\n    <Deck theme={theme}>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading style={{height: '30%', margin: 'auto'}}>An introduction to GraphQL</Heading>\n      </Slide>\n      {/* <Slide backgroundColor=\"darkBg\">\n        <Heading>RPC style</Heading>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>RPC style</Heading>\n      </Slide> */}\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>REST Architectural Style</Heading>\n        <Image src={rmmImg} alt=\"Richardson Maturity Model\" style={{width: '70%', margin: '0 auto'}}/>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>LEVELS 0, 1 AND 2</Heading>\n        <UnorderedList>\n          <ListItem>Resource unicity</ListItem>\n          <ListItem>Client use HTTP verbs</ListItem>\n          <ListItem>Server use HTTP codes</ListItem>\n          <ListItem>Content negotiation <br/>\n          ‚û° Use media types to describe WHAT is expect\n          </ListItem>\n        </UnorderedList>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>LEVEL 3: HATEOAS</Heading>\n        <UnorderedList>\n          <ListItem><em><b>H</b>ypertext <b>A</b>s <b>T</b>he <b>E</b>ngine <b>O</b>f <b>T</b>he <b>A</b>pplication <b>S</b>tate</em></ListItem>\n          <ListItem>Resources are self-describing (discoverability) <br/>\n          ‚û° Use links to describe HOW the service is used</ListItem>\n          <ListItem>Hypermedia formats (e.g., HAL, JSON-LD, HYDRA)</ListItem>\n        </UnorderedList>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>LEVEL 3: HATEOAS</Heading>\n        <CodePane\n          theme={material}\n          fontSize={18}\n          language=\"js\"\n          showLineNumbers={false}\n        >\n        {indentNormalizer(`\n{\n  \"id\": \"66\",\n  \"title\": \"My order\",\n  \"description\": \"My order description\",\n  \"_links\": {\n    \"self\": {\n      \"href\": \"/orders/66\"\n    },\n    // if I can't quote, there's no link!\n    \"quote\": {\n      \"href\": \"/orders/66/quote\",\n    },\n    \"company\": {\n      \"href\": \"/companies/5/\"\n    }\n  }\n}\n        `)}\n        </CodePane>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading style={{ margin: 0 }}>REST</Heading>\n        <Text style={{margin: 0, padding: 0}}>Pros:</Text>\n        <UnorderedList>\n          <ListItem>üëç cache consistency (idempotent/safe HTTP method)</ListItem>\n          <ListItem>üëç loose coupling</ListItem>\n        </UnorderedList>\n        <Text style={{margin: 0, padding: 0}}>Cons:</Text>\n        <UnorderedList>\n          <ListItem>üëé Heavier response</ListItem>\n          <ListItem>üëé No \"multi-GET\"</ListItem>\n          <ListItem>üëé Clients need to understand what links are about</ListItem>\n          <ListItem><small> üëé ...nobody understand REST! (...and it's ok)</small></ListItem>\n        </UnorderedList>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading style={{ margin: 0 }}>HTTP API‚Ñ¢</Heading>\n        <Text style={{margin: 0, padding: 0}}>Pros:</Text>\n        <UnorderedList>\n          <ListItem>üëç cache consistency (idempotent/safe HTTP method)</ListItem>\n          <ListItem>üëç easy way to communicate between back&front</ListItem>\n        </UnorderedList>\n        <Text style={{margin: 0, padding: 0}}>Cons:</Text>\n        <UnorderedList>\n          <ListItem>üëé Documentation</ListItem>\n          <ListItem>üëé \"multi-GET\" / loose coupling tradeoff</ListItem>\n        </UnorderedList>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>GraphQL</Heading>\n        <Image src={graphqllogoImg} alt=\"GraphQL logo\" style={{width: '30%', margin: '0 auto'}}/>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üñá Model 101</Heading>\n        <CodePane\n        fontSize={18}\n        theme={material}\n        language=\"graphql\"\n        autoFillHeight\n        >\n        {indentNormalizer(`\n          type Order {\n            title: String! # ! means required\n            description: String\n            company: Company\n          }\n          \n          type Company {\n            name: String!\n            orders: [Order]\n          }\n        `)}\n        </CodePane>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üîé Queries 101</Heading>\n        <CodePane\n        fontSize={18}\n        language=\"graphql\"\n        theme={material}\n        autoFillHeight\n        >\n        {indentNormalizer(`\n          query GetOrdersAndCompanies {\n            orders {\n              title\n              company {\n                name\n              }\n            }\n          }\n        `)}\n        </CodePane>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Appear priority={2}><Heading>ü•≥ 1 call, only fetch what's needed</Heading></Appear>\n        <Appear priority={0}>\n          <CodePane\n            fontSize={18}\n            language=\"graphql\"\n            showLineNumbers={false}\n            theme={material}\n          >\n            {indentNormalizer(`\n              HTTP GET /orders/5\n\n              # then...\n              HTTP GET /materials/1\n              HTTP GET /materials/2\n              HTTP GET /materials/3\n            `)}\n          </CodePane>\n        </Appear>\n        <Appear priority={1}>\n          <CodePane\n            fontSize={18}\n            language=\"graphql\"\n            theme={material}\n            showLineNumbers={false}\n          >\n            {indentNormalizer(`\n              query getOrder {\n                order(id: \"5\") {\n                  title\n                  materials {\n                    name\n                  }\n                }\n              }\n            `)}\n          </CodePane>\n        </Appear>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üöÄ GraphQL in action</Heading>\n        <Image src={beFeSchemaImg} alt=\"App Schema\" style={{width: '30%', margin: '20px auto'}} />\n        <Link style={{margin: '0 auto'}} href=\"https://github.com/maxpou/nest-react-graphql\">github.com/maxpou/nest-react-graphql</Link>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>‚öôÔ∏è Focus: Queries params</Heading>\n        <CodePane\n          fontSize={12}\n          language=\"graphql\"\n          autoFillHeight\n          theme={material}\n          showLineNumbers={false}\n        >\n          {indentNormalizer(`\n            query getOrder($id: ID!) {\n              order(id: $id) {\n                title\n                quotes {\n                  company {\n                    name\n                  }\n                }\n              }\n            }\n            # QUERY_VARIABLES\n            {\n              \"id\": \"60\"\n            }\n          `)}\n        </CodePane>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üí° Focus: Directives</Heading>\n        <CodePane\n          fontSize={18}\n          theme={material}\n          language=\"ts\"\n          showLineNumbers={false}\n          autoFillHeight\n        >\n        {indentNormalizer(`\n        directive @deprecated(\n          reason: String = \"No longer supported\"\n        ) on FIELD_DEFINITION | ENUM_VALUE\n\n        type Order {\n          id: ID!\n          orderId: String! @deprecated(reason: \"Use \\`id\\` instead.\")\n          # ...\n        }\n        `)}\n        </CodePane>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üòï Caching</Heading>\n        <UnorderedList>\n          <Text>‚ö†Ô∏è Incompatible with:</Text>\n          <ListItem>browser caching <small>(i.e service workers)</small></ListItem>\n          <ListItem>reverse proxy <small>(i.e varnish)</small></ListItem>\n        </UnorderedList>\n        <Appear>\n          <Text>... we always query the same endpoint <small>(https://myapi.com/graphql)</small></Text>\n        </Appear>\n        <Appear><Text>...But...</Text></Appear>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üß† Focus: Caching (FE w/ Apollo)</Heading>\n        <Text margin={0}>Support fetch policy on the query level (cache first, network only...)\n        {/* https://www.apollographql.com/docs/react/data/queries/#supported-fetch-policies */}\n        <br />\n        Internal cache out of the box</Text>\n        <CodePane\n          fontSize={12}\n          language=\"graphql\"\n          showLineNumbers={false}\n          // highlightRanges={[1, 3]}\n          theme={material}\n        >\n          {indentNormalizer(`\n          # will auto-update cache\n          mutation {\n            UpdateOrder(id: 3, name: \"Updated order\") { ... }\n          }\n          query {\n            order(id: 3) {\n              name\n            }\n          }\n          `)}\n        </CodePane>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üß† Focus: Caching (BE)</Heading>\n        <CodePane\n          fontSize={18}\n          language=\"graphql\"\n          theme={material}\n          showLineNumbers={false}\n        >\n          {indentNormalizer(`\n            type Order {\n              id: ID!\n              title: String\n\n              # maxAge: 30 => 30s\n              quotes: [Quote!] @cacheControl(maxAge: 30)\n              \n              # PRIVATE => depends on the curent user logged in\n              orderUnlockedByCurrentUser: Boolean! @cacheControl(maxAge: 10, scope: PRIVATE)\n            }\n          `)}\n        </CodePane>\n        <Text>‚ùì Can also be done dynamically in your NestJS resolver</Text>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>ü§Ø Focus: Preventing malicious querying</Heading>\n        <CodePane\n          fontSize={18}\n          theme={material}\n          language=\"graphql\"\n          showLineNumbers={false}\n        >\n        {indentNormalizer(`\nquery maliciousQuery {\n  company(id: \"some-id\") {\n    quotes(first: 99999) {\n      company {\n        quotes(first: 99999) {\n          company {\n            # ...repeat times 10000...\n          }\n        }\n      }\n    }\n  }\n}\n        `)}\n        </CodePane>\n        <Link href=\"https://github.com/4Catalyzer/graphql-validation-complexity\">üëâ github.com/4Catalyzer/graphql-validation-complexity</Link>\n      </Slide>\n      <Slide backgroundColor=\"darkBg\">\n        <Heading>üìö Reading</Heading>\n        <UnorderedList>\n          <ListItem>\n            <Link style={{margin: '0 auto'}} href=\"https://spec.graphql.org/October2021/\">\n              GraphQL spec\n            </Link>\n          </ListItem>\n          <ListItem>\n            <Link style={{margin: '0 auto'}} href=\"https://www.apollographql.com/docs/react/data/operation-best-practices/\">\n              GraphQL query best practices (apollographql.com)\n            </Link>\n          </ListItem>\n        </UnorderedList>\n      </Slide>\n    </Deck>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}